/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    `java-library`
    // Add the JMH plugin
    id("me.champeau.jmh") version "0.7.3"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework (Example, add if you have tests)
    // testImplementation(libs.junit)

    // This dependency is used by the application (Example, add if needed)
    // implementation(libs.guava)

    // Add JMH dependencies
    val jmhVersion = "1.37"
    jmh("org.openjdk.jmh:jmh-core:$jmhVersion")
    jmhAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// The JMH plugin automatically configures the 'jmh' source set.
// Explicit configuration is usually not needed unless customizing paths.
// sourceSets {
//     jmh {
//         java.srcDirs("src/jmh/java")
//     }
// }

jmh {
    fork.set(1)              // -f 1
    warmupIterations.set(5)  // -wi 5
    iterations.set(10)       // -i 10

    // JVM args for the forked benchmark process
    jvmArgs.set(listOf(
        "--add-exports=java.base/jdk.internal.vm.annotation=ALL-UNNAMED",
        "-XX:-RestrictContended"
    ))
}

tasks.withType<JavaCompile>().configureEach {
    if (name.contains("jmh", ignoreCase = true)) {
        options.compilerArgs.add("--add-exports")
        options.compilerArgs.add("java.base/jdk.internal.vm.annotation=ALL-UNNAMED")
    }
}
